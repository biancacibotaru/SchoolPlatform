import React, { useState } from 'react';
import { useLocation } from 'react-router-dom';
import './examPages.css';

const ConfigureExam = () => {
    const location = useLocation();
    const queryParams = new URLSearchParams(location.search);
    const subjectId = queryParams.get('subjectId') || queryParams.get('id');

    const [examDetails, setExamDetails] = useState({
        title: '',
        description: '',
        duration: '',
        startedOn: '',
        closedOn: ''
    });

    const [questions, setQuestions] = useState([]);
    const [newQuestion, setNewQuestion] = useState({
        text: '',
        points: '',
        answers: [{ text: '', isCorrect: false }]
    });

    const [showAddQuestion, setShowAddQuestion] = useState(true);

    const handleExamDetailsChange = (e) => {
        const { name, value } = e.target;
        setExamDetails({ ...examDetails, [name]: value });
    };

    const handleQuestionChange = (e) => {
        const { name, value } = e.target;
        setNewQuestion({ ...newQuestion, [name]: value });
    };

    const handleAnswerChange = (index, e) => {
        const { name, value, checked } = e.target;
        const answers = [...newQuestion.answers];
        if (name === 'text') {
            answers[index].text = value;
        } else if (name === 'isCorrect') {
            answers[index].isCorrect = checked;
        }
        setNewQuestion({ ...newQuestion, answers });
    };

    const addAnswer = () => {
        setNewQuestion({
            ...newQuestion,
            answers: [...newQuestion.answers, { text: '', isCorrect: false }]
        });
    };

    const saveQuestion = () => {
        setQuestions([...questions, newQuestion]);
        setNewQuestion({ text: '', points: '', answers: [{ text: '', isCorrect: false }] });
        setShowAddQuestion(false);
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        const examData = {
            Id: 0, // Assuming Id will be generated by the backend
            SubjectId: subjectId,
            Title: examDetails.title,
            Description: examDetails.description,
            Duration: examDetails.duration,
            StartedOn: examDetails.startedOn,
            ClosedOn: examDetails.closedOn,
            Questions: questions.map((q, index) => ({
                Id: index + 1, // Assigning a temporary Id for each question
                Text: q.text,
                Points: q.points,
                Answers: q.answers.map((a, aIndex) => ({
                    Id: aIndex + 1, // Assigning a temporary Id for each answer
                    Text: a.text,
                    IsCorrect: a.isCorrect
                }))
            }))
        };

        try {
            const response = await fetch(`http://localhost:5271/api/Exam/InsertExam`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(examData),
            });

            if (!response.ok) {
                throw new Error('Network response was not ok');
            }

            alert('Exam configured successfully!');
        } catch (error) {
            console.error('Error configuring exam:', error);
        }
    };

    return (
        <div className="exam-content-course">
            <h1>Configure Exam</h1>
            <form onSubmit={handleSubmit} className="exam-form">
                <div className="exam-header">
                    <div className="exam-buttons">
                        <button type="submit" className="exam-submit">Save Exam</button>
                    </div>
                    <div className="exam-details">
                        <div className="exam-detail-item">
                            <label>
                                Title:
                                <input
                                    type="text"
                                    name="title"
                                    value={examDetails.title}
                                    onChange={handleExamDetailsChange}
                                    required
                                />
                            </label>
                        </div>
                        <div className="exam-detail-item">
                            <label>
                                Description:
                                <input
                                    name="description"
                                    value={examDetails.description}
                                    onChange={handleExamDetailsChange}
                                    required
                                    rows="4"
                                />
                            </label>
                        </div>
                        <div className="exam-detail-item">
                            <label>
                                Duration:
                                <input
                                    type="number"
                                    name="duration"
                                    value={examDetails.duration}
                                    onChange={handleExamDetailsChange}
                                    required
                                />
                            </label>
                        </div>
                        <div className="exam-detail-item">
                            <label>
                                Started on:
                                <input
                                    type="date"
                                    name="startedOn"
                                    value={examDetails.startedOn}
                                    onChange={handleExamDetailsChange}
                                    required
                                />
                            </label>
                        </div>
                        <div className="exam-detail-item">
                            <label>
                                Closed on:
                                <input
                                    type="date"
                                    name="closedOn"
                                    value={examDetails.closedOn}
                                    onChange={handleExamDetailsChange}
                                    required
                                />
                            </label>
                        </div>
                    </div>
                </div>
                {questions.map((question, qIndex) => (
                    <div key={qIndex} className="exam-question-item">
                        <h2>Question {qIndex + 1}</h2>
                        <p>{question.text}</p>
                        <p>Points: {question.points}</p>
                        <ul className="exam-ul">
                            {question.answers.map((answer, aIndex) => (
                                <li key={aIndex}>
                                    <input
                                        type="checkbox"
                                        checked={answer.isCorrect}
                                        readOnly
                                    /> {answer.text}
                                </li>
                            ))}
                        </ul>
                    </div>
                ))}
                {showAddQuestion && (
                    <div className="exam-new-question">
                        <h2>Add New Question</h2>
                        <label>
                            Question Text:
                            <input
                                type="text"
                                name="text"
                                value={newQuestion.text}
                                onChange={handleQuestionChange}
                                required
                            />
                        </label>
                        <label>
                            Points:
                            <input
                                type="number"
                                name="points"
                                value={newQuestion.points}
                                onChange={handleQuestionChange}
                                required
                            />
                        </label>
                        {newQuestion.answers.map((answer, index) => (
                            <div key={index} className="exam-answer-item">
                                <label>
                                    Answer {index + 1}:
                                    <input
                                        type="text"
                                        name="text"
                                        value={answer.text}
                                        onChange={(e) => handleAnswerChange(index, e)}
                                        required
                                    />
                                </label>
                                <label>
                                    Correct:
                                    <input
                                        type="checkbox"
                                        name="isCorrect"
                                        checked={answer.isCorrect}
                                        onChange={(e) => handleAnswerChange(index, e)}
                                    />
                                </label>
                            </div>
                        ))}
                        <button type="button" className="exam-button" onClick={addAnswer}>Add Another Answer</button>
                        <button type="button" className="exam-button" onClick={saveQuestion}>Save Question</button>
                    </div>
                )}
                {!showAddQuestion && (
                    <button type="button" className="exam-button" onClick={() => setShowAddQuestion(true)}>Add Another Question</button>
                )}
            </form>
        </div>
    );
};

export default ConfigureExam;
